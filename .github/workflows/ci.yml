name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend - Lint, Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./backend
      run: npm run lint
      
    - name: Run TypeScript build
      working-directory: ./backend
      run: npm run build
      
    - name: Setup SQLite
      working-directory: ./backend
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3
        
    - name: Run database migrations
      working-directory: ./backend
      run: |
        npx prisma generate
        npx prisma migrate deploy
        
    - name: Run tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: file:./test.db

  frontend-tests:
    name: Frontend - Lint, Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run TypeScript build
      working-directory: ./frontend
      run: npm run build
      
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --passWithNoTests --silent
      env:
        CI: true

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and test Docker images
      run: |
        docker compose build
        docker compose up -d
        echo "Aguardando servi√ßos inicializarem..."
        sleep 30
        
        echo "Verificando status dos containers..."
        docker compose ps
        
        echo "Testando backend..."
        backend_ok=false
        for i in {1..10}; do
          if curl -f http://localhost:3001/health; then
            echo "‚úÖ Backend est√° funcionando!"
            backend_ok=true
            break
          else
            echo "‚è≥ Tentativa $i: Backend ainda n√£o est√° pronto, aguardando..."
            sleep 10
          fi
        done
        
        if [ "$backend_ok" = false ]; then
          echo "‚ùå Backend falhou ao inicializar"
          docker compose logs backend
          exit 1
        fi
        
        echo "Testando frontend..."
        frontend_ok=false
        for i in {1..15}; do
          if curl -f http://localhost:3000; then
            echo "‚úÖ Frontend est√° funcionando!"
            frontend_ok=true
            break
          else
            echo "‚è≥ Tentativa $i: Frontend ainda n√£o est√° pronto, aguardando..."
            sleep 10
          fi
        done
        
        if [ "$frontend_ok" = false ]; then
          echo "‚ùå Frontend falhou ao inicializar"
          docker compose logs frontend
          exit 1
        fi
        
        echo "Verificando logs dos containers..."
        docker compose logs backend
        docker compose logs frontend
        
        echo "üéâ Todos os servi√ßos est√£o funcionando!"
        docker compose down 